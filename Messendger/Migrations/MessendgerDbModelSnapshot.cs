// <auto-generated />
using System;
using Messendger.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Messendger.Migrations
{
    [DbContext(typeof(MessendgerDb))]
    partial class MessendgerDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Messendger.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit")
                        .HasColumnName("isGroup");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Messendger.Entities.ChatParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdChat")
                        .HasColumnType("int")
                        .HasColumnName("id_chat");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("IdChat");

                    b.HasIndex("IdUser");

                    b.ToTable("ChatParticipants");
                });

            modelBuilder.Entity("Messendger.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdMessage")
                        .HasColumnType("int")
                        .HasColumnName("id_message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("IdMessage");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Messendger.Entities.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdFriend")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_friend");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("IdFriend");

                    b.HasIndex("IdUser");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Messendger.Entities.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateSend")
                        .HasColumnType("date")
                        .HasColumnName("date_send");

                    b.Property<string>("IdRecipient")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_recipient");

                    b.Property<string>("IdSender")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_sender");

                    b.HasKey("Id");

                    b.HasIndex("IdRecipient");

                    b.HasIndex("IdSender");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("Messendger.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Messendger.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdChat")
                        .HasColumnType("int")
                        .HasColumnName("id_chat");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_user");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("text");

                    b.Property<DateTime>("TimeSend")
                        .HasColumnType("datetime2")
                        .HasColumnName("timeSend");

                    b.HasKey("Id");

                    b.HasIndex("IdChat");

                    b.HasIndex("IdUser");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Messendger.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("IdPhoto")
                        .HasColumnType("int")
                        .HasColumnName("id_photo");

                    b.Property<DateOnly>("LastLoginDate")
                        .HasColumnType("date")
                        .HasColumnName("last_login_date");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPhoto");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Messendger.Entities.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Messendger.Entities.UserInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<int>("IdJob")
                        .HasColumnType("int")
                        .HasColumnName("id_job");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.HasIndex("IdJob");

                    b.ToTable("UserInfo", (string)null);
                });

            modelBuilder.Entity("Messendger.Entities.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("date_end");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id_user");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("UserTasks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Messendger.Entities.ChatParticipant", b =>
                {
                    b.HasOne("Messendger.Entities.Chat", "IdChatNavigation")
                        .WithMany("ChatParticipants")
                        .HasForeignKey("IdChat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChatParticipants_Chats");

                    b.HasOne("Messendger.Entities.User", "IdUserNavigation")
                        .WithMany("ChatParticipants")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChatParticipants_Users");

                    b.Navigation("IdChatNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Messendger.Entities.File", b =>
                {
                    b.HasOne("Messendger.Entities.Message", "IdMessageNavigation")
                        .WithMany("Files")
                        .HasForeignKey("IdMessage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Files_Messages");

                    b.Navigation("IdMessageNavigation");
                });

            modelBuilder.Entity("Messendger.Entities.Friend", b =>
                {
                    b.HasOne("Messendger.Entities.User", "IdFriendNavigation")
                        .WithMany("FriendIdFriendNavigations")
                        .HasForeignKey("IdFriend")
                        .IsRequired()
                        .HasConstraintName("FK_Friends_Users");

                    b.HasOne("Messendger.Entities.User", "IdUserNavigation")
                        .WithMany("FriendIdUserNavigations")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Friends_Users1");

                    b.Navigation("IdFriendNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Messendger.Entities.FriendRequest", b =>
                {
                    b.HasOne("Messendger.Entities.User", "IdRecipientNavigation")
                        .WithMany("FriendRequestIdRecipientNavigations")
                        .HasForeignKey("IdRecipient")
                        .IsRequired()
                        .HasConstraintName("FK_FriendRequests_Users");

                    b.HasOne("Messendger.Entities.User", "IdSenderNavigation")
                        .WithMany("FriendRequestIdSenderNavigations")
                        .HasForeignKey("IdSender")
                        .IsRequired()
                        .HasConstraintName("FK_FriendRequests_Users1");

                    b.Navigation("IdRecipientNavigation");

                    b.Navigation("IdSenderNavigation");
                });

            modelBuilder.Entity("Messendger.Entities.Message", b =>
                {
                    b.HasOne("Messendger.Entities.Chat", "IdChatNavigation")
                        .WithMany("Messages")
                        .HasForeignKey("IdChat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Messages_Chats");

                    b.HasOne("Messendger.Entities.User", "IdUserNavigation")
                        .WithMany("Messages")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Messages_Users");

                    b.Navigation("IdChatNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Messendger.Entities.User", b =>
                {
                    b.HasOne("Messendger.Entities.UserImage", "IdPhotoNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdPhoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Users_UserImages");

                    b.Navigation("IdPhotoNavigation");
                });

            modelBuilder.Entity("Messendger.Entities.UserInfo", b =>
                {
                    b.HasOne("Messendger.Entities.User", "IdNavigation")
                        .WithOne("UserInfo")
                        .HasForeignKey("Messendger.Entities.UserInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserInfo_Users");

                    b.HasOne("Messendger.Entities.Job", "IdJobNavigation")
                        .WithMany("UserInfos")
                        .HasForeignKey("IdJob")
                        .IsRequired()
                        .HasConstraintName("FK_UserInfo_Jobs");

                    b.Navigation("IdJobNavigation");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Messendger.Entities.UserTask", b =>
                {
                    b.HasOne("Messendger.Entities.User", "IdUserNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_Users");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Messendger.Entities.Chat", b =>
                {
                    b.Navigation("ChatParticipants");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Messendger.Entities.Job", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("Messendger.Entities.Message", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Messendger.Entities.User", b =>
                {
                    b.Navigation("ChatParticipants");

                    b.Navigation("FriendIdFriendNavigations");

                    b.Navigation("FriendIdUserNavigations");

                    b.Navigation("FriendRequestIdRecipientNavigations");

                    b.Navigation("FriendRequestIdSenderNavigations");

                    b.Navigation("Messages");

                    b.Navigation("Tasks");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Messendger.Entities.UserImage", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
